/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  EcoregionListResponse,
  EcoregionLocalizationRequest,
  EcoregionLocalizationResponse,
  EcoregionRequest,
  EcoregionResponse,
  Error,
  GetEcoregionsIdParams,
  GetEcoregionsParams,
} from "./strapi.schemas";
import { API } from "../../services/api/index";
import type { ErrorType } from "../../services/api/index";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getEcoregions = (
  params?: GetEcoregionsParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<EcoregionListResponse>({ url: `/ecoregions`, method: "GET", params, signal }, options);
};

export const getGetEcoregionsQueryKey = (params?: GetEcoregionsParams) => {
  return [`/ecoregions`, ...(params ? [params] : [])] as const;
};

export const getGetEcoregionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getEcoregions>>,
  TError = ErrorType<Error>,
>(
  params?: GetEcoregionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEcoregions>>, TError, TData>>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEcoregionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEcoregions>>> = ({ signal }) =>
    getEcoregions(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEcoregions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEcoregionsQueryResult = NonNullable<Awaited<ReturnType<typeof getEcoregions>>>;
export type GetEcoregionsQueryError = ErrorType<Error>;

export const useGetEcoregions = <
  TData = Awaited<ReturnType<typeof getEcoregions>>,
  TError = ErrorType<Error>,
>(
  params?: GetEcoregionsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEcoregions>>, TError, TData>>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEcoregionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postEcoregions = (
  ecoregionRequest: EcoregionRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<EcoregionResponse>(
    {
      url: `/ecoregions`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: ecoregionRequest,
    },
    options,
  );
};

export const getPostEcoregionsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEcoregions>>,
    TError,
    { data: EcoregionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postEcoregions>>,
  TError,
  { data: EcoregionRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postEcoregions>>,
    { data: EcoregionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postEcoregions(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostEcoregionsMutationResult = NonNullable<Awaited<ReturnType<typeof postEcoregions>>>;
export type PostEcoregionsMutationBody = EcoregionRequest;
export type PostEcoregionsMutationError = ErrorType<Error>;

export const usePostEcoregions = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEcoregions>>,
    TError,
    { data: EcoregionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postEcoregions>>,
  TError,
  { data: EcoregionRequest },
  TContext
> => {
  const mutationOptions = getPostEcoregionsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getEcoregionsId = (
  id: number,
  params?: GetEcoregionsIdParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<EcoregionResponse>(
    { url: `/ecoregions/${id}`, method: "GET", params, signal },
    options,
  );
};

export const getGetEcoregionsIdQueryKey = (id: number, params?: GetEcoregionsIdParams) => {
  return [`/ecoregions/${id}`, ...(params ? [params] : [])] as const;
};

export const getGetEcoregionsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getEcoregionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetEcoregionsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEcoregionsId>>, TError, TData>>;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEcoregionsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEcoregionsId>>> = ({ signal }) =>
    getEcoregionsId(id, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getEcoregionsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetEcoregionsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEcoregionsId>>>;
export type GetEcoregionsIdQueryError = ErrorType<Error>;

export const useGetEcoregionsId = <
  TData = Awaited<ReturnType<typeof getEcoregionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetEcoregionsIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getEcoregionsId>>, TError, TData>>;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEcoregionsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putEcoregionsId = (
  id: number,
  ecoregionRequest: EcoregionRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<EcoregionResponse>(
    {
      url: `/ecoregions/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: ecoregionRequest,
    },
    options,
  );
};

export const getPutEcoregionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putEcoregionsId>>,
    TError,
    { id: number; data: EcoregionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putEcoregionsId>>,
  TError,
  { id: number; data: EcoregionRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putEcoregionsId>>,
    { id: number; data: EcoregionRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putEcoregionsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutEcoregionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putEcoregionsId>>
>;
export type PutEcoregionsIdMutationBody = EcoregionRequest;
export type PutEcoregionsIdMutationError = ErrorType<Error>;

export const usePutEcoregionsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putEcoregionsId>>,
    TError,
    { id: number; data: EcoregionRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putEcoregionsId>>,
  TError,
  { id: number; data: EcoregionRequest },
  TContext
> => {
  const mutationOptions = getPutEcoregionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteEcoregionsId = (id: number, options?: SecondParameter<typeof API>) => {
  return API<number>({ url: `/ecoregions/${id}`, method: "DELETE" }, options);
};

export const getDeleteEcoregionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEcoregionsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteEcoregionsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteEcoregionsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteEcoregionsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteEcoregionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteEcoregionsId>>
>;

export type DeleteEcoregionsIdMutationError = ErrorType<Error>;

export const useDeleteEcoregionsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEcoregionsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteEcoregionsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteEcoregionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const postEcoregionsIdLocalizations = (
  id: number,
  ecoregionLocalizationRequest: EcoregionLocalizationRequest,
  options?: SecondParameter<typeof API>,
) => {
  return API<EcoregionLocalizationResponse>(
    {
      url: `/ecoregions/${id}/localizations`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: ecoregionLocalizationRequest,
    },
    options,
  );
};

export const getPostEcoregionsIdLocalizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEcoregionsIdLocalizations>>,
    TError,
    { id: number; data: EcoregionLocalizationRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postEcoregionsIdLocalizations>>,
  TError,
  { id: number; data: EcoregionLocalizationRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postEcoregionsIdLocalizations>>,
    { id: number; data: EcoregionLocalizationRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return postEcoregionsIdLocalizations(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostEcoregionsIdLocalizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postEcoregionsIdLocalizations>>
>;
export type PostEcoregionsIdLocalizationsMutationBody = EcoregionLocalizationRequest;
export type PostEcoregionsIdLocalizationsMutationError = ErrorType<Error>;

export const usePostEcoregionsIdLocalizations = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postEcoregionsIdLocalizations>>,
    TError,
    { id: number; data: EcoregionLocalizationRequest },
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postEcoregionsIdLocalizations>>,
  TError,
  { id: number; data: EcoregionLocalizationRequest },
  TContext
> => {
  const mutationOptions = getPostEcoregionsIdLocalizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
